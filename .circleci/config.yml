version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.1

jobs:
  build_and_lint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint using command in Makefile
          command: |
            . venv/bin/activate
            make lint

  push_image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              awscli==1.11.76
              
      - run:
          name: build docker image
          command: |
            docker build -t udacity/capstone .
              
      - run: 
          name: push docker image to AWS ECR
          command: |
            login="$(aws ecr --region us-east-2 get-login)"
            ${login}
            docker tag udacity/capstone:latest "${ECR_ENDPOINT}/udacity/capstone:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/udacity/capstone:${CIRCLE_SHA1}"
            
  update_deployment_spec:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: update image in deployment.yaml and selector in service.yaml
          command: |
            cd kubernetes-deployment
            sed -i "s/latest-tag/${CIRCLE_SHA1}/g" deployment.yaml
            sed -i "s/latest-tag/${CIRCLE_SHA1}/g" service.yaml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/kubernetes-deployment/deployment.yaml
            - project/kubernetes-deployment/service.yaml
  
  create_deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: print out updated deployment spec
          command: |
            echo "-- deployment.yaml --"
            cat ~/project/kubernetes-deployment/deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      # create/update deployment in kubernetes cluster
      - kubernetes/create-or-update-resource:
          namespace: bluegreen
          resource-file-path: kubernetes-deployment/deployment.yaml
          resource-name: deployment/flaskapp
          
  update_service:
    executor: aws-eks/python3
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          namespace: bluegreen
          resource-file-path: kubernetes-deployment/service.yaml
          resource-name: service/flaskapp
          
  get_currentVersion:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/install-kubectl
      - run:
          name: get previous version and save to memstash
          command: |
            export VERSION=$(kubectl get service flaskapp -o=jsonpath='{.spec.selector.version}' --namespace=bluegreen) #find deployed version
            echo $VERSION
            curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data $VERSION https://api.memstash.io/values/previousVersion_${CIRCLE_SHA1}
  
  smoke_test:
    executor: aws-eks/python3
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/install-kubectl
      - run:
          name: curl public URL
          command: |
            export ExternalIP=$(kubectl get service flaskapp -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' --namespace=bluegreen) # get external clusterIP
            URL=$ExternalIP:8000
            echo $URL 
            curl -s $URL | grep "Sklearn Prediction Home"
            
  delete_old_image:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Install aws-cli
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run: 
          name: Delete Image on ECR
          command: |
            OLD_VERSION=$(curl -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/previousVersion_${CIRCLE_SHA1})
            echo $OLD_VERSION
            aws ecr batch-delete-image --repository-name udacity/capstone --image-ids imageTag=$OLD_VERSION

  delete_old_deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/install-kubectl
      - run:
          name: delete previous kubernetes deployment
          command: |
            OLD_VERSION=$(curl -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/previousVersion_${CIRCLE_SHA1})
            echo $OLD_VERSION
            kubectl delete deployment flaskapp-$OLD_VERSION --namespace=bluegreen
 

workflows:
  default:
    jobs:
      - get_currentVersion
      - build_and_lint
      - push_image:
          requires: [build_and_lint]
          filters:
              branches:
                only: [master]
      - update_deployment_spec:
          requires: [push_image]
          filters:
            branches:
              only: [master]
      - create_deployment:
         requires: [update_deployment_spec]
         filters:
            branches:
              only: [master]
      - update_service:
         requires: [create_deployment]
         filters:
            branches:
              only: [master]
      - smoke_test:
         requires: [update_service]
         filters:
            branches:
              only: [master]
      - delete_old_image:
          requires: [smoke_test]
          filters:
            branches:
              only: [master]
      - delete_old_deployment:
          requires: [smoke_test]
          filters:
            branches:
              only: [master]




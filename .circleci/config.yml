# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.1

jobs:

  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  push_image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              awscli==1.11.76
              
      - run:
          name: build docker image
          command: |
            docker build -t udacity/capstone .
              
      - run: 
          name: Push application Docker image
          command: |
            echo "Login to ECR"
            login="$(aws ecr --region us-east-2 get-login)"
            echo "login variable: $login"
            ${login}
            docker tag udacity/capstone:latest "${ECR_ENDPOINT}/udacity/capstone:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/udacity/capstone:${CIRCLE_SHA1}"
            
  update_deployment_spec:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Update deployment yaml
          command: |
            cd kubernetes-deployment
            OLD_IMAGETAG=(cat image-tag.txt)
            echo $OLD_IMAGETAG
            sed -i 's/$OLD_IMAGETAG/${CIRCLE_SHA1}/g' deployment.yaml
            sed -i 's/ECR_ENDPOINT/${ECR_ENDPOINT}/g' deployment.yaml
            echo "-- deployment.yaml --"
            cat deployment.yaml
            echo ${CIRCLE_SHA1} > image-tag.txt
            echo "-- image-tag.txt --"
            cat image-tag.txt
  
  create_deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          namespace: bluegreen
          get-rollout-status: true
          resource-file-path: kubernetes-deployment/deployment.yaml
          resource-name: deployment/flaskapp

workflows:
  default:
    jobs:
      - push_image
      - update_deployment_spec
      - create_deployment

